// Mocks generated by Mockito 5.4.4 from annotations
// in fixtures_app/test/core/helpers/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:convert' as _i9;
import 'dart:typed_data' as _i11;

import 'package:connectivity_plus/connectivity_plus.dart' as _i13;
import 'package:dartz/dartz.dart' as _i2;
import 'package:fixtures_app/core/failures/failures.dart' as _i7;
import 'package:fixtures_app/features/fixtures/data/data_sources/fixtures_remote_data_src.dart'
    as _i12;
import 'package:fixtures_app/features/fixtures/domain/entities/fixture.dart'
    as _i8;
import 'package:fixtures_app/features/fixtures/domain/entities/fixture_details.dart'
    as _i4;
import 'package:fixtures_app/features/fixtures/domain/repositories/fixtures_repository.dart'
    as _i5;
import 'package:http/http.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_1 extends _i1.SmartFake implements _i3.Response {
  _FakeResponse_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_2 extends _i1.SmartFake
    implements _i3.StreamedResponse {
  _FakeStreamedResponse_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFixtureDetails_3 extends _i1.SmartFake
    implements _i4.FixtureDetails {
  _FakeFixtureDetails_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FixturesRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockFixturesRepository extends _i1.Mock
    implements _i5.FixturesRepository {
  MockFixturesRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.Either<_i7.Failure, List<_i8.Fixture>>> getFixtures(
          {required String? date}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFixtures,
          [],
          {#date: date},
        ),
        returnValue:
            _i6.Future<_i2.Either<_i7.Failure, List<_i8.Fixture>>>.value(
                _FakeEither_0<_i7.Failure, List<_i8.Fixture>>(
          this,
          Invocation.method(
            #getFixtures,
            [],
            {#date: date},
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, List<_i8.Fixture>>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, _i4.FixtureDetails>> getFixtureDetails(
          {required String? fixtureDetailsUrl}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFixtureDetails,
          [],
          {#fixtureDetailsUrl: fixtureDetailsUrl},
        ),
        returnValue:
            _i6.Future<_i2.Either<_i7.Failure, _i4.FixtureDetails>>.value(
                _FakeEither_0<_i7.Failure, _i4.FixtureDetails>(
          this,
          Invocation.method(
            #getFixtureDetails,
            [],
            {#fixtureDetailsUrl: fixtureDetailsUrl},
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, _i4.FixtureDetails>>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClient extends _i1.Mock implements _i3.Client {
  MockClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i3.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i6.Future<_i3.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i6.Future<_i3.Response>);

  @override
  _i6.Future<_i3.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i6.Future<_i3.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i6.Future<_i3.Response>);

  @override
  _i6.Future<_i3.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i9.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i6.Future<_i3.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i6.Future<_i3.Response>);

  @override
  _i6.Future<_i3.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i9.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i6.Future<_i3.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i6.Future<_i3.Response>);

  @override
  _i6.Future<_i3.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i9.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i6.Future<_i3.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i6.Future<_i3.Response>);

  @override
  _i6.Future<_i3.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i9.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i6.Future<_i3.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i6.Future<_i3.Response>);

  @override
  _i6.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i6.Future<String>.value(_i10.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i6.Future<String>);

  @override
  _i6.Future<_i11.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i6.Future<_i11.Uint8List>.value(_i11.Uint8List(0)),
      ) as _i6.Future<_i11.Uint8List>);

  @override
  _i6.Future<_i3.StreamedResponse> send(_i3.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i6.Future<_i3.StreamedResponse>.value(_FakeStreamedResponse_2(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i6.Future<_i3.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [FixturesRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockFixturesRemoteDataSource extends _i1.Mock
    implements _i12.FixturesRemoteDataSource {
  MockFixturesRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<List<_i8.Fixture>> getFixtures({required String? date}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFixtures,
          [],
          {#date: date},
        ),
        returnValue: _i6.Future<List<_i8.Fixture>>.value(<_i8.Fixture>[]),
      ) as _i6.Future<List<_i8.Fixture>>);

  @override
  _i6.Future<_i4.FixtureDetails> getFixtureDetails(
          {required String? fixtureDetailsUrl}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFixtureDetails,
          [],
          {#fixtureDetailsUrl: fixtureDetailsUrl},
        ),
        returnValue: _i6.Future<_i4.FixtureDetails>.value(_FakeFixtureDetails_3(
          this,
          Invocation.method(
            #getFixtureDetails,
            [],
            {#fixtureDetailsUrl: fixtureDetailsUrl},
          ),
        )),
      ) as _i6.Future<_i4.FixtureDetails>);
}

/// A class which mocks [Connectivity].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectivity extends _i1.Mock implements _i13.Connectivity {
  MockConnectivity() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Stream<List<_i13.ConnectivityResult>> get onConnectivityChanged =>
      (super.noSuchMethod(
        Invocation.getter(#onConnectivityChanged),
        returnValue: _i6.Stream<List<_i13.ConnectivityResult>>.empty(),
      ) as _i6.Stream<List<_i13.ConnectivityResult>>);

  @override
  _i6.Future<List<_i13.ConnectivityResult>> checkConnectivity() =>
      (super.noSuchMethod(
        Invocation.method(
          #checkConnectivity,
          [],
        ),
        returnValue: _i6.Future<List<_i13.ConnectivityResult>>.value(
            <_i13.ConnectivityResult>[]),
      ) as _i6.Future<List<_i13.ConnectivityResult>>);
}
